version: '3.8'

services:
  db:
    image: pgvector/pgvector:pg16
    environment:
      POSTGRES_DB: app
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/scripts/init-pgvector.sql:/docker-entrypoint-initdb.d/init-pgvector.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio-setup:
    image: minio/mc:latest
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      until nc -z minio 9000; do echo 'Waiting for MinIO...'; sleep 1; done;
      mc alias set minio http://minio:9000 minioadmin minioadmin;
      mc mb minio/files --ignore-existing;
      mc policy set public minio/files;
      echo 'MinIO setup complete';
      "

  api:
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://postgres:postgres@db:5432/app
      REDIS_URL: redis://redis:6379/0
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      S3_BUCKET: files
      NODE_ENV: development
    ports:
      - "4000:4000"
    volumes:
      - ./apps/api:/app
      - /app/node_modules

  # Note: web and workers services are commented out as they don't exist yet
  # Uncomment and create the respective apps when needed
  
  # workers:
  #   build:
  #     context: .
  #     dockerfile: ./apps/workers/Dockerfile
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #     minio:
  #       condition: service_healthy
  #   environment:
  #     DATABASE_URL: postgresql://postgres:postgres@db:5432/app
  #     REDIS_URL: redis://redis:6379/0
  #     S3_ENDPOINT: http://minio:9000
  #     S3_ACCESS_KEY: minioadmin
  #     S3_SECRET_KEY: minioadmin
  #     S3_BUCKET: files
  #     NODE_ENV: development
  #   volumes:
  #     - ./apps/workers:/app
  #     - /app/node_modules

  # web:
  #   build:
  #     context: .
  #     dockerfile: ./apps/web/Dockerfile
  #   depends_on:
  #     - api
  #   environment:
  #     NEXT_PUBLIC_API_URL: http://localhost:4000
  #     NODE_ENV: development
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./apps/web:/app
  #     - /app/node_modules
  #     - /app/.next

volumes:
  postgres_data:
  redis_data:
  minio_data: